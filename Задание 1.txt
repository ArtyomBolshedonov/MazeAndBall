Интерфейсы приходится создавать для обобщения похожих объектов. В нашем проекте объекты могут иметь различные свойства (различное поведение),
а ряд объектов может иметь все эти свойства сразу. Это нужно если наш объект должен реализовывать функционал более чем одного класса.
C#- строго типизированный язык не поддерживающий множественного наследования. Классы наследуются, но только от одного источника,
то есть каждый класс может иметь только один родительский. Интерфейсы позволяют безопасно преодолеть эти ограничения.
Только абстракные классы могут содержать методы без реализации (к примеру). А так класс содержит реализацию своих сущностей, а интерфейс
напротив не содержит реализацию таковых. Класс не поддерживает множественное наследование, а интерфейс поддерживает. Более того класс
может наследоваться от множества интерфейсов, но обязан содержать реализацию сущностей интерфейса.